# -*- coding: utf-8 -*-
"""CSE_LAB_Assignment_08_Name_Istiak_Ahmed_ID_22101133_sec_04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-RaDwSx0MDkRSvqlBCC-sr30GvPjLe1U
"""

#01

class RealNumber:
    
    def __init__(self, r=0):
        self.__realValue = r  
    def getRealValue(self):
        return self.__realValue
    def setRealValue(self, r):
        self.__realValue = r
    def __str__(self):
        return 'RealPart: '+str(self.getRealValue())    
    
#write code

class ComplexNumber(RealNumber):

  def __init__(self, r=1, i=1):
    super().__init__(r)
    self.imag = i

  def __str__(self):
    return f"RealPart: {super().getRealValue()}.0 \nImaginaryPart: {self.imag}.0"

cn1 = ComplexNumber()
print(cn1)
print('---------')
cn2 = ComplexNumber(5,7)
print(cn2)

#02

class RealNumber:
    def __init__(self, number=0):
        self.number = number
    def __add__(self, anotherRealNumber):
        return self.number + anotherRealNumber.number
    def __sub__(self, anotherRealNumber):
        return self.number - anotherRealNumber.number
    def __str__(self):
        return str(self.number)

#Write Code Here

class ComplexNumber(RealNumber):
  def __init__(self, r, i):
    if isinstance(r,int):
      super().__init__(r)
      self.im = i
      self.new = f"{self.number} + {self.im}i"

    else:
      super().__init__(r.number)
      self.im = i
      self.new = f"{self.number} + {self.im}i"

  def __add__(self, other):
    real = self.number + other.number
    imag = self.im + other.im
    self.new = f"{real} + {imag}i"
    return self.new

  def __sub__(self, other):
    real = self.number - other.number
    imag = self.im - other.im
    self.new = f"{real} {imag}i"
    return self.new

  def __str__(self):
    return str(self.new)

r1 = RealNumber(3)
r2 = RealNumber(5)
print(r1+r2)
cn1 = ComplexNumber(2, 1)
print(cn1)
cn2 = ComplexNumber(r1, 5)
print(cn2)
cn3 = cn1 + cn2
print(cn3)
cn4 = cn1 - cn2
print(cn4)

#03

class Account: 
    def __init__(self, balance):
        self._balance = balance
        
    def getBalance(self):
        return self._balance
#Write Code HERE

class CheckingAccount(Account):
  numberOfAccount = 0
  def __init__(self, b=0.0):
    self.bal = b
    CheckingAccount.numberOfAccount += 1

  def __str__(self):
    return str(self.bal)
    
print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)
print(CheckingAccount())
print(CheckingAccount(100.00))
print(CheckingAccount(200.00))
print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)

#04

class Fruit:
    def __init__(self, formalin=False, name=''):
        self.__formalin = formalin
        self.name = name
    
    def getName(self):
        return self.name
    
    def hasFormalin(self):
        return self.__formalin
    
class testFruit:
    def test(self, f):
        print('----Printing Detail----')
        if f.hasFormalin():
            print('Do not eat the',f.getName(),'.')
            print(f)
        else:
            print('Eat the',f.getName(),'.')
            print(f)
#Write Code Here

class Mango(Fruit,testFruit):
  def __init__(self):
    super().__init__(True,"Mango")

  def __str__(self):
    return str("Mangos are bad for you.")

class Jackfruit(Fruit,testFruit):
  def __init__(self):
    super().__init__(False,"Jackfruit")

  def __str__(self):
    return str("Jackfruits are good for you.")

m = Mango()
j = Jackfruit()
t1 = testFruit()
t1.test(m)
t1.test(j)

#05

class Exam:
    def __init__(self,marks):
        self.marks = marks
        self.time = 60
        
    def examSyllabus(self):
        return "Maths , English"
    def examParts(self):
        return "Part 1 - Maths\nPart 2 - English\n"
#Write Code Here

class ScienceExam(Exam):

  def __init__(self, mark, t, *arg):
    super().__init__(mark)
    self.time = t
    self.part = 2 + len(arg)
    self.arg = arg
    self.sub = ""
    for i in arg:
      self.sub += ", " + i

  def __str__(self):
    return str(f"Marks: {self.marks} Time: {self.time} minutes Number of Parts: {self.part}")

  def examSyllabus(self):
     return super().examSyllabus() + self.sub

  def examParts(self):
    p = super().examParts()
    for i in range(len(self.arg)):
      p += f"Part {i+3} - {self.arg[i]}\n"
    return p[:-1]
    
engineering = ScienceExam(100,90,"Physics","HigherMaths")
print(engineering)
print('----------------------------------')
print(engineering.examSyllabus())
print(engineering.examParts())
print('==================================') 
architecture = ScienceExam(100,120,"Physics","HigherMaths","Drawing")
print(architecture)
print('----------------------------------')
print(architecture.examSyllabus())
print(architecture.examParts())

#06

class Shape3D:

  pi = 3.14159
  def __init__(self, name = 'Default', radius = 0):
    self._area = 0
    self._name = name
    self._height = 'No need'
    self._radius = radius   

  def calc_surface_area(self):
    return 2 * Shape3D.pi * self._radius

  def __str__(self):
      return "Radius: "+str(self._radius)
#Write Code Here

class Sphere(Shape3D):
  def __init__(self, n, r):
    super().__init__(n,r)
    print("Shape name: Sphere, Area Formula: 4 * pi * r * r")
    self.area = 0

  def calc_surface_area(self):
     self.area = 4 * Shape3D.pi * self._radius ** 2

  def __str__(self):
    return str(f"{super().__str__()}, Height: {self._height} \nArea: {self.area}")

class Cylinder(Shape3D):
  def __init__(self, n, r, h):
    super().__init__(n,r)
    self._height = h
    print("Shape name: Cylinder, Area Formula: 2 * pi * r * (r+h)")
    self.area = 0

  def calc_surface_area(self):
    self.area = 2 * Shape3D.pi * self._radius * (self._radius + self._height)

  def __str__(self):
    return str(f"{super().__str__()}, Height: {self._height} \nArea: {self.area}")

sph = Sphere('Sphere', 5)
print('----------------------------------')
sph.calc_surface_area()
print(sph)
print('==================================')
cyl = Cylinder('Cylinder', 5, 10)
print('----------------------------------')
cyl.calc_surface_area()
print(cyl)

#07

class PokemonBasic:

  def __init__(self, name = 'Default', hp = 0, weakness = 'None', type = 'Unknown'):
    self.name = name
    self.hit_point = hp
    self.weakness = weakness
    self.type = type

  def get_type(self):
    return 'Main type: ' + self.type

  def get_move(self):
    return 'Basic move: ' + 'Quick Attack'

  def __str__(self):
    return "Name: " + self.name + ", HP: " + str(self.hit_point) + ", Weakness: " + self.weakness
#Write Code Here

class PokemonExtra(PokemonBasic):
  def __init__(self, n, hp, weak, main, other=None, move=None):
    super().__init__(n,hp,weak,main)
    self.other = other
    self.move = move

  def __str__(self):
    return super().__str__()

  def get_type(self):
    if self.other == None:
      return super().get_type()
    else:
      return super().get_type() + f", Secondary type: {self.other}"  
  def get_move(self):
    if self.move == None:
      return super().get_move()
    else:
      p = ""
      for i in self.move:
        p += i + ','
      q = p[:-1]
      return super().get_move() + f"\nOther move: {q}"

print('\n------------Basic Info:--------------')
pk = PokemonBasic()
print(pk)
print(pk.get_type())
print(pk.get_move())

print('\n------------Pokemon 1 Info:-------------')
charmander = PokemonExtra('Charmander', 39, 'Water', 'Fire')
print(charmander)
print(charmander.get_type())
print(charmander.get_move())

print('\n------------Pokemon 2 Info:-------------')
charizard = PokemonExtra('Charizard', 78, 'Water', 'Fire', 'Flying', ('Fire Spin', 'Fire Blaze'))
print(charizard)
print(charizard.get_type())
print(charizard.get_move())

#08

class Team:

  def __init__(self, name):
    self.name = "default"
    self.total_player = 5
  def info(self):
    print("We love sports")
# Write your code here.

class FootBallTeam(Team):
  def __init__(self, n):
    super().__init__(n)
    self.__name = n
    self.total_player = 11
  def info(self):
    print(f"Our name is {self.__name}\nWe play Football ")
    super().info()

class CricketTeam(Team):
  def __init__(self, n):
    super().__init__(n)
    self.__name = n
    self.total_player = 11

  def info(self):
    print(f"Our name is {self.__name}\nWe play Cricket")
    super().info()

class Team_test:
  def check(self, tm):
    print("=========================")
    print("Total Player: ", tm.total_player)
    tm.info()

f = FootBallTeam("Brazil")
c = CricketTeam("Bangladesh")
test = Team_test()
test.check(f)
test.check(c)

#09

class Pokemon:

    def __init__(self, p):
        self.pokemon = p
        self.pokemon_type = "Needs to be set"
        self.pokemon_weakness = "Needs to be set"
    def kind(self):
        return self.pokemon_type     
    def weakness(self):
        return self.pokemon_weakness 
    def what_am_i(self):
        print("I am a Pokemon.")
#Write Code Here

class Pikachu(Pokemon):
    def __init__(self):
        super().__init__("Pikachu")
        self.pokemon_type = "Electric"
        self.pokemon_weakness = "Ground"

    def kind(self):
        return self.pokemon_type
    
    def weakness(self):
        return self.pokemon_weakness

    def what_am_i(self):
        super().what_am_i()
        print("I am Pikachu.")

class Charmander(Pokemon):
    def __init__(self):
        super().__init__("Charmander")
        self.pokemon_type = "Fire"
        self.pokemon_weakness = "Water, Ground and Rock"

    def kind(self):
        return self.pokemon_type
    
    def weakness(self):
        return self.pokemon_weakness

    def what_am_i(self):
       super().what_am_i()
       print("I am Charmander.")

pk1 = Pikachu()
print("Pokemon:", pk1.pokemon)
print("Type:", pk1.kind())
print("Weakness:", pk1.weakness())
pk1.what_am_i()
print("========================")
c1 = Charmander()
print("Pokemon:", c1.pokemon)
print("Type:", c1.kind())
print("Weakness:", c1.weakness())
c1.what_am_i()

#10

class Department:
  def __init__(self, s):
    self.semester = s
    self.name = "Default"
    self.id = -1
      
  def student_info(self):
    print("Name:", self.name)
    print("ID:", self.id) 
      
  def courses(self, c1, c2, c3):
    print("No courses Approved yet!")
#Write Code Here

class CSE(Department):
  def __init__(self, n, id, sem):
    super().__init__(sem)
    self.name = n
    self.id = id

  def student_info(self):
     return super().student_info()

  def courses(self, *course):
    print(f"Courses Approved to this CSE student in {self.semester} semester:")
    for i in course:
      print(i)

class EEE(Department):
  def __init__(self, n, id, sem):
    super().__init__(sem)
    self.name = n
    self.id = id

  def student_info(self):
     return super().student_info()

  def courses(self, *course):
    print(f"Courses Approved to this EEE student in {self.semester} semester:")
    for i in course:
      print(i)

s1 = CSE("Rahim", 16101328,"Spring2016")
s1.student_info()
s1.courses("CSE110", "MAT110", "ENG101")
print("==================")
s2 = EEE("Tanzim", 18101326, "Spring2018")
s2.student_info()
s2.courses("Mat110", "PHY111", "ENG101")
print("==================")
s3 = CSE("Rudana", 18101326, "Fall2017")
s3.student_info()
s3.courses("CSE111", "PHY101", "MAT120")
print("==================")
s4 = EEE("Zainab", 19201623, "Summer2019")
s4.student_info()
s4.courses("EEE201", "PHY112", "MAT120")

